unit SrvConn_Impl;

{----------------------------------------------------------------------------}
{ This unit was automatically generated by the RemObjects SDK after reading  }
{ the RODL file associated with this project .                               }
{                                                                            }
{ This is where you are supposed to code the implementation of your objects. }
{----------------------------------------------------------------------------}

{$I RemObjects.inc}

interface

uses
  {vcl:} Classes, SysUtils, 
  {RemObjects:} uROXMLIntf, uROClientIntf, uROTypes, uROServer, uROServerIntf, uROSessions,
  {Required:} uRORemoteDataModule,
  {Generated:} FZSale_Intf;

type
  { TSrvConn }
  TSrvConn = class(TRORemotable, ISrvConn)
  private
    procedure SI(nZID,nDID,nMAC: AnsiString;
      const nUser,nPwd,nVerMIT,nVerClient: AnsiString; var nResult: SrvResult);
    procedure RM(nZID,nDID,nMAC: AnsiString; const nIsFirst: Boolean; var nResult: SrvResult);
  protected
    { ISrvConn methods }
    function SweetHeart: SrvResult;
    function SignIn(const nZID: AnsiString; const nDID: AnsiString; const nMAC: AnsiString; const nUser: AnsiString; const nPwd: AnsiString; const nVerMIT: AnsiString; const nVerClient: AnsiString): SrvResult;
    function RegistMe(const nZID: AnsiString; const nDID: AnsiString; const nMAC: AnsiString; const nIsFirst: Boolean): SrvResult;
  end;

implementation

uses
  ULibFun, UDataModule, UROModule, UMgrChannel, USysService, USysConst, USysDB;

//Desc: 心跳指令
function TSrvConn.SweetHeart: SrvResult;
begin
  with ROModule.LockModuleStatus^ do
  try
    FNumConn := FNumConn + 1;
    FNumSweetHeart := FNumSweetHeart + 1;

    Result := MakeSrvResult;
    Result.Re_sult := FOnline;
    Result.DataStr := FTerminalID;
  finally
    ROModule.ReleaseStatusLock;
  end;
end;

function TSrvConn.SignIn(const nZID: AnsiString; const nDID: AnsiString;
 const nMAC: AnsiString; const nUser: AnsiString; const nPwd: AnsiString;
 const nVerMIT: AnsiString; const nVerClient: AnsiString): SrvResult;
var nStr: string;
begin
  Result := MakeSrvResult;
  try
    SI(nZID, nDId, nMAC, nUser, nPwd, nVerMIT, nVerClient, Result);
    //do action

    if Result.Re_sult then
         nStr := cAction_Succ
    else nStr := cAction_Fail;

    nStr := Format('Fun:[ SignIn ] RES:[ %s ] ACT_ID:[ %s ]', [nStr, nZID]);
    ShowDebugLog(nStr, False);
  except
    on e:Exception do
    begin
      Result.Re_sult := False;
      Result.DataStr := e.Message;
      Result.Action := cAction_Error;

      with ROModule.LockModuleStatus^,gROModuleParam do
      try
        FNumActionError := FNumActionError + 1;
      finally
        ROModule.ReleaseStatusLock;
      end;

      nStr := 'Fun:[ SignIn ] ACT_ID:[ %s ] ERR:[ %s ]';
      nStr := Format(nStr, [nZID, e.Message]);
      ShowDebugLog(nStr, True);
    end;
  end;
end;

function TSrvConn.RegistMe(const nZID: AnsiString; const nDID: AnsiString;
 const nMAC: AnsiString; const nIsFirst: Boolean): SrvResult;
var nStr: string;
begin
  Result := MakeSrvResult;
  try
    RM(nZID, nDID, nMAC, nIsFirst, Result);
    //do action

    if Result.Re_sult then
         nStr := cAction_Succ
    else nStr := cAction_Fail;

    nStr := Format('Fun:[ RegistMe ] RES:[ %s ] ACT_ID:[ %s ]', [nStr, nZID]);
    ShowDebugLog(nStr, False);
  except
    on e:Exception do
    begin
      Result.Re_sult := False;
      Result.DataStr := e.Message;
      Result.Action := cAction_Error;

      with ROModule.LockModuleStatus^,gROModuleParam do
      try
        FNumActionError := FNumActionError + 1;
      finally
        ROModule.ReleaseStatusLock;
      end;

      nStr := 'Fun:[ RegistMe ] ACT_ID:[ %s ] ERR:[ %s ]';
      nStr := Format(nStr, [nZID, e.Message]);
      ShowDebugLog(nStr, True);
    end;
  end;
end;

//------------------------------------------------------------------------------
//Date: 2011-10-31
//Parm: 终端;代理;MAC;用户名;密码;版本
//Desc: 执行登录动作
procedure TSrvConn.SI(nZID, nDID, nMAC: AnsiString; const nUser, nPwd, nVerMIT,
 nVerClient : AnsiString; var nResult: SrvResult);
var nRes,nTmp: SrvResult;
    nChannel: PChannelItem;
begin
  with ROModule.LockModuleStatus^ do
  try
    FNumConn := FNumConn + 1;
    FNumSignIn := FNumSignIn + 1;

    nZID := FTerminalID;
    nDID := FSpID;
    nMAC := FMAC;
  finally
    ROModule.ReleaseStatusLock;
  end;

  nRes := nil;
  nChannel := gChannelManager.LockChannel(cChannel_Conn);
  try
    if not Assigned(nChannel) then
    begin
      nResult.DataStr := '无可用数据通道';
      nResult.Action := cAction_Error; Exit;
    end;

    with nChannel^ do
    begin
      if not Assigned(FChannel) then
        FChannel := CoSrvConn.Create(FMsg, FHttp);
      //xxxxx

      FHttp.TargetURL := gROModuleParam.FRemoteURL;
      nRes := ISrvConn(FChannel).SignIn(nZID, nDID, nMAC, nUser, nPwd,
                         cVersion_DBSync, cVersion_Client);
      //xxxxx

      if Assigned(nRes) then
      begin
        nTmp := nResult;
        nResult := nRes;
        nRes := nTmp;
      end;
    end;
  finally
    nRes.Free;
    gChannelManager.ReleaseChannel(nChannel);
  end;
end;

//Desc: 执行注册动作
procedure TSrvConn.RM(nZID, nDID, nMAC: AnsiString;
  const nIsFirst: Boolean; var nResult: SrvResult);
var nRes,nTmp: SrvResult;
    nChannel: PChannelItem;
begin
  with ROModule.LockModuleStatus^ do
  try
    FNumConn := FNumConn + 1;
    FNumRegister := FNumRegister + 1;

    FTerminalID := nZID;
    FSpID := nDID;
    nMAC := FMAC;
  finally
    ROModule.ReleaseStatusLock;
  end;

  nRes := nil;
  nChannel := gChannelManager.LockChannel(cChannel_Conn);
  try
    if not Assigned(nChannel) then
    begin
      nResult.DataStr := '无可用数据通道';
      nResult.Action := cAction_Error; Exit;
    end;

    with nChannel^ do
    begin
      if not Assigned(FChannel) then
        FChannel := CoSrvConn.Create(FMsg, FHttp);
      //xxxxx
      
      FHttp.TargetURL := gROModuleParam.FRemoteURL;
      nRes := ISrvConn(FChannel).RegistMe(nZID, nDID, nMAC, nIsFirst);

      if Assigned(nRes) then
      begin
        nTmp := nResult;
        nResult := nRes;
        nRes := nTmp;
      end;
    end;
  finally
    nRes.Free;
    gChannelManager.ReleaseChannel(nChannel);
  end;
end;

end.
