unit FZSale_Invk;

{----------------------------------------------------------------------------}
{ This unit was automatically generated by the RemObjects SDK after reading  }
{ the RODL file associated with this project .                               }
{                                                                            }
{ Do not modify this unit manually, or your changes will be lost when this   }
{ unit is regenerated the next time you compile the project.                 }
{----------------------------------------------------------------------------}

{$I RemObjects.inc}

interface

uses
  {vcl:} Classes,
  {RemObjects:} uROXMLIntf, uROServer, uROServerIntf, uROTypes, uROClientIntf,
  {Generated:} FZSale_Intf;

type
  TSrvDB_Invoker = class(TROInvoker)
  private
  protected
  public
    constructor Create; override;
  published
    procedure Invoke_SQLQuery(const __Instance:IInterface; const __Message:IROMessage; const __Transport:IROTransport; out __oResponseOptions:TROResponseOptions);
    procedure Invoke_SQLExecute(const __Instance:IInterface; const __Message:IROMessage; const __Transport:IROTransport; out __oResponseOptions:TROResponseOptions);
    procedure Invoke_SQLUpdates(const __Instance:IInterface; const __Message:IROMessage; const __Transport:IROTransport; out __oResponseOptions:TROResponseOptions);
  end;

  TSrvConn_Invoker = class(TROInvoker)
  private
  protected
  public
    constructor Create; override;
  published
    procedure Invoke_SweetHeart(const __Instance:IInterface; const __Message:IROMessage; const __Transport:IROTransport; out __oResponseOptions:TROResponseOptions);
    procedure Invoke_SignIn(const __Instance:IInterface; const __Message:IROMessage; const __Transport:IROTransport; out __oResponseOptions:TROResponseOptions);
    procedure Invoke_RegistMe(const __Instance:IInterface; const __Message:IROMessage; const __Transport:IROTransport; out __oResponseOptions:TROResponseOptions);
  end;

implementation

uses
  {RemObjects:} uRORes, uROClient;

{ TSrvDB_Invoker }

constructor TSrvDB_Invoker.Create;
begin
  inherited Create;
  FAbstract := False;
end;

procedure TSrvDB_Invoker.Invoke_SQLQuery(const __Instance:IInterface; const __Message:IROMessage; const __Transport:IROTransport; out __oResponseOptions:TROResponseOptions);
{ function SQLQuery(const nZID: AnsiString; const nDID: AnsiString; const nSQL: AnsiString; out nData: Binary): SrvResult; }
var
  nZID: AnsiString;
  nDID: AnsiString;
  nSQL: AnsiString;
  nData: Binary;
  lResult: FZSale_Intf.SrvResult;
  __lObjectDisposer: TROObjectDisposer;
begin
  nData := nil;
  lResult := nil;
  try
    __Message.Read('nZID', TypeInfo(AnsiString), nZID, []);
    __Message.Read('nDID', TypeInfo(AnsiString), nDID, []);
    __Message.Read('nSQL', TypeInfo(AnsiString), nSQL, []);

    lResult := (__Instance as ISrvDB).SQLQuery(nZID, nDID, nSQL, nData);

    __Message.InitializeResponseMessage(__Transport, 'FZSale', 'SrvDB', 'SQLQueryResponse');
    __Message.Write('Result', TypeInfo(FZSale_Intf.SrvResult), lResult, []);
    __Message.Write('nData', TypeInfo(Binary), nData, []);
    __Message.Finalize;
    __Message.UnsetAttributes(__Transport);

  finally
    __lObjectDisposer := TROObjectDisposer.Create(__Instance);
    try
      __lObjectDisposer.Add(nData);
      __lObjectDisposer.Add(lResult);
    finally
      __lObjectDisposer.Free();
    end;
  end;
end;

procedure TSrvDB_Invoker.Invoke_SQLExecute(const __Instance:IInterface; const __Message:IROMessage; const __Transport:IROTransport; out __oResponseOptions:TROResponseOptions);
{ function SQLExecute(const nZID: AnsiString; const nDID: AnsiString; const nSQL: SQLItem): SrvResult; }
var
  nZID: AnsiString;
  nDID: AnsiString;
  nSQL: FZSale_Intf.SQLItem;
  lResult: FZSale_Intf.SrvResult;
  __lObjectDisposer: TROObjectDisposer;
begin
  nSQL := nil;
  lResult := nil;
  try
    __Message.Read('nZID', TypeInfo(AnsiString), nZID, []);
    __Message.Read('nDID', TypeInfo(AnsiString), nDID, []);
    __Message.Read('nSQL', TypeInfo(FZSale_Intf.SQLItem), nSQL, []);

    lResult := (__Instance as ISrvDB).SQLExecute(nZID, nDID, nSQL);

    __Message.InitializeResponseMessage(__Transport, 'FZSale', 'SrvDB', 'SQLExecuteResponse');
    __Message.Write('Result', TypeInfo(FZSale_Intf.SrvResult), lResult, []);
    __Message.Finalize;
    __Message.UnsetAttributes(__Transport);

  finally
    __lObjectDisposer := TROObjectDisposer.Create(__Instance);
    try
      __lObjectDisposer.Add(nSQL);
      __lObjectDisposer.Add(lResult);
    finally
      __lObjectDisposer.Free();
    end;
  end;
end;

procedure TSrvDB_Invoker.Invoke_SQLUpdates(const __Instance:IInterface; const __Message:IROMessage; const __Transport:IROTransport; out __oResponseOptions:TROResponseOptions);
{ function SQLUpdates(const nZID: AnsiString; const nDID: AnsiString; const nSQLList: SQLItems; const nAtomic: Boolean): SrvResult; }
var
  nZID: AnsiString;
  nDID: AnsiString;
  nSQLList: FZSale_Intf.SQLItems;
  nAtomic: Boolean;
  lResult: FZSale_Intf.SrvResult;
  __lObjectDisposer: TROObjectDisposer;
begin
  nSQLList := nil;
  lResult := nil;
  try
    __Message.Read('nZID', TypeInfo(AnsiString), nZID, []);
    __Message.Read('nDID', TypeInfo(AnsiString), nDID, []);
    __Message.Read('nSQLList', TypeInfo(FZSale_Intf.SQLItems), nSQLList, []);
    __Message.Read('nAtomic', TypeInfo(Boolean), nAtomic, []);

    lResult := (__Instance as ISrvDB).SQLUpdates(nZID, nDID, nSQLList, nAtomic);

    __Message.InitializeResponseMessage(__Transport, 'FZSale', 'SrvDB', 'SQLUpdatesResponse');
    __Message.Write('Result', TypeInfo(FZSale_Intf.SrvResult), lResult, []);
    __Message.Finalize;
    __Message.UnsetAttributes(__Transport);

  finally
    __lObjectDisposer := TROObjectDisposer.Create(__Instance);
    try
      __lObjectDisposer.Add(nSQLList);
      __lObjectDisposer.Add(lResult);
    finally
      __lObjectDisposer.Free();
    end;
  end;
end;

{ TSrvConn_Invoker }

constructor TSrvConn_Invoker.Create;
begin
  inherited Create;
  FAbstract := False;
end;

procedure TSrvConn_Invoker.Invoke_SweetHeart(const __Instance:IInterface; const __Message:IROMessage; const __Transport:IROTransport; out __oResponseOptions:TROResponseOptions);
{ function SweetHeart: SrvResult; }
var
  lResult: FZSale_Intf.SrvResult;
  __lObjectDisposer: TROObjectDisposer;
begin
  lResult := nil;
  try
    lResult := (__Instance as ISrvConn).SweetHeart;

    __Message.InitializeResponseMessage(__Transport, 'FZSale', 'SrvConn', 'SweetHeartResponse');
    __Message.Write('Result', TypeInfo(FZSale_Intf.SrvResult), lResult, []);
    __Message.Finalize;
    __Message.UnsetAttributes(__Transport);

  finally
    __lObjectDisposer := TROObjectDisposer.Create(__Instance);
    try
      __lObjectDisposer.Add(lResult);
    finally
      __lObjectDisposer.Free();
    end;
  end;
end;

procedure TSrvConn_Invoker.Invoke_SignIn(const __Instance:IInterface; const __Message:IROMessage; const __Transport:IROTransport; out __oResponseOptions:TROResponseOptions);
{ function SignIn(const nZID: AnsiString; const nDID: AnsiString; const nMAC: AnsiString; const nUser: AnsiString; const nPwd: AnsiString; 
                    const nVerMIT: AnsiString; const nVerClient: AnsiString): SrvResult; }
var
  nZID: AnsiString;
  nDID: AnsiString;
  nMAC: AnsiString;
  nUser: AnsiString;
  nPwd: AnsiString;
  nVerMIT: AnsiString;
  nVerClient: AnsiString;
  lResult: FZSale_Intf.SrvResult;
  __lObjectDisposer: TROObjectDisposer;
begin
  lResult := nil;
  try
    __Message.Read('nZID', TypeInfo(AnsiString), nZID, []);
    __Message.Read('nDID', TypeInfo(AnsiString), nDID, []);
    __Message.Read('nMAC', TypeInfo(AnsiString), nMAC, []);
    __Message.Read('nUser', TypeInfo(AnsiString), nUser, []);
    __Message.Read('nPwd', TypeInfo(AnsiString), nPwd, []);
    __Message.Read('nVerMIT', TypeInfo(AnsiString), nVerMIT, []);
    __Message.Read('nVerClient', TypeInfo(AnsiString), nVerClient, []);

    lResult := (__Instance as ISrvConn).SignIn(nZID, nDID, nMAC, nUser, nPwd, nVerMIT, nVerClient);

    __Message.InitializeResponseMessage(__Transport, 'FZSale', 'SrvConn', 'SignInResponse');
    __Message.Write('Result', TypeInfo(FZSale_Intf.SrvResult), lResult, []);
    __Message.Finalize;
    __Message.UnsetAttributes(__Transport);

  finally
    __lObjectDisposer := TROObjectDisposer.Create(__Instance);
    try
      __lObjectDisposer.Add(lResult);
    finally
      __lObjectDisposer.Free();
    end;
  end;
end;

procedure TSrvConn_Invoker.Invoke_RegistMe(const __Instance:IInterface; const __Message:IROMessage; const __Transport:IROTransport; out __oResponseOptions:TROResponseOptions);
{ function RegistMe(const nZID: AnsiString; const nDID: AnsiString; const nMAC: AnsiString; const nIsFirst: Boolean): SrvResult; }
var
  nZID: AnsiString;
  nDID: AnsiString;
  nMAC: AnsiString;
  nIsFirst: Boolean;
  lResult: FZSale_Intf.SrvResult;
  __lObjectDisposer: TROObjectDisposer;
begin
  lResult := nil;
  try
    __Message.Read('nZID', TypeInfo(AnsiString), nZID, []);
    __Message.Read('nDID', TypeInfo(AnsiString), nDID, []);
    __Message.Read('nMAC', TypeInfo(AnsiString), nMAC, []);
    __Message.Read('nIsFirst', TypeInfo(Boolean), nIsFirst, []);

    lResult := (__Instance as ISrvConn).RegistMe(nZID, nDID, nMAC, nIsFirst);

    __Message.InitializeResponseMessage(__Transport, 'FZSale', 'SrvConn', 'RegistMeResponse');
    __Message.Write('Result', TypeInfo(FZSale_Intf.SrvResult), lResult, []);
    __Message.Finalize;
    __Message.UnsetAttributes(__Transport);

  finally
    __lObjectDisposer := TROObjectDisposer.Create(__Instance);
    try
      __lObjectDisposer.Add(lResult);
    finally
      __lObjectDisposer.Free();
    end;
  end;
end;

initialization
end.
